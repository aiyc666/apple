@color: red;
.a {
  color: @color;
  //background: @{color}; XXX
}

// 选择器
@s1: .a;
@s2: b;
@s3: ~".a .b .c, .d.d ~ .e + .f";
@s4: ~"div > p > span";

@{s1} { color: red; }
.@{s2} { color: red; }
#@{s2} { color: red; }
@{s2} { color: red; }
@{s2}[@{s2}='x'] { color: red; }
@{s3} { color: red; }
@{s4} { color: red; }
@{s1} + @{s2}, @{s3}:hover { color: red; }
@{s1}-@{s2} { color: red; }
@a: aa;
@aa: bb;
@bb: cc;

.var {
  //val: @{@@a};
}


// url
@img: "../images";
.a { background: url("@{img}/a.png"); }

// 属性
@h: height;
@m: max;
@co: co;
@lor: lor;
.a {
    @{h}: 30px;
  line-@{h}: 30px;
    @{m}-@{h}: 30px;
    @{co}@{lor}: red;
}

// 懒加载、作用域、默认值
div { color: @late; }
@late: red;
@var: 0;
.a {
  @var: 1;
  .b {
    @var: 2;
    height: @var;
    @var: 22;
  }
  height: @var;
}
@base-color: blue;
@dark-color: darken(@base-color, 10%);
div { color: @dark-color; }
@base-color: red;

a:hover:active { color: red; }

// 继承
.g { color: red; }
.i {
  height: 0;
  .ii { border: none; }
}
.h:extend(.g, .i) {
  width: 0;
}
.j {
  &:extend(.g, .i, .h);
  font-size: 12px;
}
.gg {
  color: red;
  .gg-2 {
    font-size: 5px;
  }
}
.hh:extend(.gg) {}

li.list > a { color: red; }
button.list-style {
  &:extend(li.list > a); // use the same list styles
}
.k:extend(.a){ color: red; };

// 混合
.mx(@p1: red) {
  color: @p1;
  .mx-2 {
    color: blue;
  }
}
.mx1 {
  .mx();
}

@device: pc;
//@device: pad;
.effect(pc) {
  &:hover { .on; }
}
.effect(pad) {
  &:active { .on; }
}
.effect() {
  &:hover when (@device=pc) { .on(); }
  &:active when (@device=pad) { .on(); }
}
.effect() when (@device=pc) { &:hover { .on; } }
.effect() when (@device=pad) { &:active { .on; } }
a {
  .on() { color: yellow; width: 1px;}
  //.mode !important;
}

.on(@style) when (@device=pc) {
  &:hover { @style(); }
}
.on(@style) when (@device=pad) {
  &:active { @style(); }
}

.btn {
  color: red;
  .on({
    color: blue;
    font-size: 14px;
  });
}


.x() {
  p1: 1;
}
.x(@a: a, @b: b, @c: c) {
  p1: @a;
  p2: @b;
  p3: @c;
  p4: @arguments;
}
.x(...) {
  p5: @arguments;
  //p55: @rest;
}
.x(@a, ...) {
  p6: @arguments;
}
.x(@a, @b...) {
  p7: @b;
}
.x(x1, @a) {
  p8: @a;
}
.x(x2, @a) {
  p9: @a;
}
.xx(@a) {
  //@a();
}
.xx {
  //.x();
  //.x(aa);
  //.x(@b:bb, aa);
  //.x(@b: bb, aa, cc);
  //.x(aa, bb, cc);
  //.x(x1, a);
  //@sw: x1;
  //.x(@sw, aaa);
  .c(){ p: cc; }
  .xx(@a: c);
}

.xf(@a; @b) {
  @p: 777;
}
.xf2() {
  .on {
    in: 111;
  }
}
.xfc {
  .a {
    //@p: 66; // 不被override
    .on() { my: 111; }
    //.xf(2; 2);
    .xf2();
    .on;
    //p: @p;
  }
  .on { out: 111 }
  @p: 55; // 被override
}

@rules: { p1: 11; p2: 22; @p: ppp; p3: @p; };
.r {
  @rules();
  .rx( {content: ' ';});
  //p: @p; 不识别
}
.rx(@rules) {
  *::before { @rules(); }
}

// 变量
// 1. selector、property、value、url
// 2. lazy load
// 3. scope
// 4. @@
// 5. default value

// 继承
// 1. 多继承

// 混合定义
// 1. 无输出
// 2. namespace
// 3. 参数表(多态)：多参、默认值、变参
// 4. inner selector
// 5. match pattern 见下：
/*
.mixin() {}           -> 0
.mixin(@a) {}         -> 1
.mixin(@a:a) {}       -> 0~1
.mixin(@a:a, ...) {}  -> 0~n
.mixin(@a, ...) {}    -> 1~n
.mixin(...) {}        -> 0~n
*/



// 混合调用
// 1. 匹配规则
// 2. !important
// 3. arguments、 rest

// 混合函数
// 1. return“变量”与“混合”
// 2. return的“变量”不覆盖本scope，但覆盖父scope

// 条件混合（Guarded Mixin） && CSS Guarded
// 语法： .mix when [not] (exp) [ [and | ,] (exp) ]... ， 运算符：>、 >=、 =、 =<、 <
// 表达式exp类型：
// 1. 参数与值比对、其它比对（非参数）
// 2. 参数与参数比对
// 3. 类型检查函数：iscolor, isnumber, isstring, iskeyword, isurl, ispixel, ispercentage, isem, isunit
// 4. default()函数


// 规则组定义
// 1. “规则组引用”不会修改definition scope
// 2. 可以return“混合”，不能return“变量”

// 规则组调用
// 1. 规则组可以当作参数传递
// 2. 规则组中的“变量引用”与“混合调用”的查找顺序：definition scope > caller scope


// @import (keywords, ...) "filename"
// keywords: reference, optional, once/multiple, less/css/inline

@import (reference) "ref.less";
.a { p: @ref-var; }
.b {
  .ref();
  .x-ref();
}


.gr(@a) when /* not */ (@a > 50) /* and (isnumber(@a)) */ , (iscolor(@a)), (isstring(@a)) {
  exp: @a;
}
//.gr(...) {
//  n-exp: @arguments;
//}
.gr(@a) when (@a) {
  t-exp: @a;
}
.gr(@a) when (default()) {
  d-exp: @a;
}

.grc {
  .gr(60);
  .gr(30);
  .gr(30);
  .gr("35");
  .gr(55);
  .gr(#fff);
  .gr(true);
}

@var: 0;
div when (@var > 0) {
  color: red;
}

// loop 循环
.loop(@n) when (@n > 0) {
  .loop(@n - 1);
  width: @n * 1px;
  //.loop(@n - 1);
}
.lp {
  .loop(10);
}

.col(@n, @i: 1) when (@i =< @n) {
  .column-@{i} { width: @i * 100% / @n }
  .col(@n, @i + 1);
}
.lp {
  .col(12);
}

// Merge合并： "+"、 "+_"
.mg {
  box-shadow+: 0 0 10px red;
  box-shadow+: 0 0 20px blue;
  background-position+: 0 0;
  background-position+: 2px 2px;
  background-position+: 4px 4px;
  transform+_: scale(1);
  transform+_: skew(30deg);
}

.mode {
  &-auto { p: 1 }
  &-cool { p: 2 }
  &-wind { p: 3 }
}


.ls {
  //@modes: "auto", "cool", "hot", "wind";
  @modes: auto, cool,
  hot, wind;
  .loop(@i: length(@modes)) when (@i > 0) {
    .loop(@i - 1);
    @m: extract(@modes, @i);
    &-@{m} {
      p: @m;
    }
  };
  .loop();
}

.fn {
  p: ceil(1.5);
  p: floor(1.5);
  p: round(1.125, 2);
  p: pi();
  p: sin(pi() / 2);
  p: sin(pi() / 6);
  p: sin(31deg);
  p: max(1, 5, 8, -9);
}

// 类型判断函数：
// isnumber/isunit: ispixel, isem, ispercentage
// isstring, iscolor, isurl, iskeyword
// isruleset
.type-fn {
  @a: 3px;
  @b: 5em;
  @c: 50%;
  @r: {color: red;};
  p1: isunit(@a, px);
  p2: isem(@b);
  p3: ispercentage(@c);
  p4: isruleset(@r);
  p5: isnumber(8deg);
  p6: isnumber(10vh);
}

// 字符串函数
.str {
  p1: escape("中国a=1&b=1");
  p2: escape(111);
  p3: escape(#fff);

  @a: 1;
  @b: name;
  @c: "中国";

  p4: %("%a-%d-%s", @a, @b, @c);
  p5: %("%A-%D-%S", @a, @b, @c);
  p6: %("%a-%a-%a", @a, @b, @c);

  p7: replace("This is Good day!", "(good)\s*day", "a $1 boy", "i");

  p8: color("#fff");

  p9: convert(1in, cm);
  p10: convert(1in, px);
  p11: convert(1pt, px);
  p12: convert(1mm, px);
  p13: convert(1vh, px);
  p14: convert(1em, px);

  p15: image-size("../img/k.jpg");
  p16: image-width("../img/vehicle.png");
  p17: data-uri("../img/k.jpg");

  div {
    @list: red, green 30%, blue;
    background-image: svg-gradient(to right, @list);
  }

}

.color {
  //@c1: hsla(80, 80%, 50%, .5);
  //@c2: rgba(50, 60, 70, .8);
  @1: hsla(287, 60%, 47%, .5);
  @2: rgba(160, 48, 192, .8);
  @3: #a030c0;

  .loop(@i) when (@i > 0) {
    .loop(@i - 1);
    h@{i}: hue(@@i);
    s@{i}: saturation(@@i);
    l@{i}: lightness(@@i);
    r@{i}: red(@@i);
    g@{i}: green(@@i);
    b@{i}: blue(@@i);
    a@{i}: alpha(@@i);
    luma@{i}: luma(@@i);
    luminance@{i}: luminance(@@i);


  }
  .loop(3);

  .cg(@c) {
    spin30: spin(@c, 30);
    saturate10: saturate(@c, 10%);
    desaturate20: desaturate(@c, 20%);
    lighten10: lighten(@c, 10%);
    darken20: darken(@c, 20%);
    fade50: fade(@c, 50%);
    fadein10: fadein(@c, 10%);
    fadeout20: fadeout(@c, 20%);
    mix: mix(red, blue);
    tint: tint(red);
    shade: shade(blue);
    greyscale: greyscale(red);
    contrast: contrast(red);
  }

  .cg(@1);

  .adv {
    multiply: multiply(#ff6600, #333333);
    screen: screen(#ff6600, #333333);
    overlay: overlay(#ff6600, #333333);
    softlight: softlight(#ff6600, #333333);
    hardlight: hardlight(#ff6600, #333333);
    difference: difference(#ff6600, #333333);
    exclusion: exclusion(#ff6600, #333333);
    average: average(#ff6600, #333333);
    negation: negation(#ff6600, #333333);

  }
}

.x {
  .btn {
    color: red;
  }
}

.btn2:extend( .x .btn ) {
  bgc: blue;
}

.lh(@line-height: 1) { line-height: @line-height; }
.t {
  .lh;
  .lh(2);
  .lh(3px);
}
.pd(@padding) { padding: @padding; }
.pd {
  .pd(0 12px);
}

@iv-image-url: "../imgages";

.bg(@img) {
  background: url('@{iv-image-url}/@{img}') 0 0 no-repeat;
}
.bg-(@img) {
  background+: url(@img) 0 0 no-repeat;
}


.bgt {
  .bg("dialog-close-btn-default.png");
  .bg-('a.jpg');
  .bg-('b.jpg');
}